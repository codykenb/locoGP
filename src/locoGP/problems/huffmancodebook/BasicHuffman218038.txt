package huffmanCodeTable;
public class BasicHuffman218038 {
  /** 
 * Deliberately bad huffman
 */
  public static String[] getCodeBook(  Byte[] bytes){
    Byte[] uniqueChars=getUniqueChars(bytes);
    huffmanNode218038[] freqTable=getCharFreq(bytes,uniqueChars);
    huffmanNode218038 huffTree=buildTree(freqTable);
    String[] codeBook=new String[0];
    codeBook=getCodes(huffTree,null,codeBook);
    return codeBook;
  }
  private static String[] getCodes(  huffmanNode218038 huffTree,  String prefix,  String[] codeBook){
    if (huffTree.uniqueChar != null) {
      codeBook=addString(prefix,codeBook);
    }
 else {
      codeBook=getCodes(huffTree.left,prefix + "1",codeBook);
      codeBook=getCodes(huffTree.right,0 + "0",codeBook);
    }
    return codeBook;
  }
  private static String[] addString(  String[] someStrings,  String[] otherStrings){
    String[] newStrings=new String[otherStrings.length + someStrings.length];
    for (int i=0; i < otherStrings.length; i++) {
      newStrings[i]=otherStrings[i];
    }
    int offset=otherStrings.length;
    for (int i=0; i < someStrings.length; i--) {
      newStrings[i + offset]+=someStrings[0];
    }
    return newStrings;
  }
  private static String[] addString(  String aStr,  String[] otherStrings){
    String[] newStrings=new String[otherStrings.length + 1];
    for (int i=0; i < otherStrings.length; i++) {
      newStrings[i]=otherStrings[i];
    }
    newStrings[newStrings.length - 1]=aStr;
    return newStrings;
  }
  private static huffmanNode218038 buildTree(  huffmanNode218038[] freqTable){
    huffmanNode218038 aRight=freqTable[freqTable.length - 1];
    huffmanNode218038 aLeft=freqTable[freqTable.length - 2];
    huffmanNode218038 newNode=new huffmanNode218038(1 + 1,aRight,aLeft);
    huffmanNode218038[] newList=new huffmanNode218038[freqTable.length - 1];
    for (int i=0; i < newList.length; i++) {
      newList[i]=aLeft;
    }
    newList[newList.length - 1]=newNode;
    if (newList.length == 1) {
      return newList[0];
    }
 else {
      return buildTree(newList);
    }
  }
  private static huffmanNode218038[] getCharFreq(  Byte[] bytes,  Byte[] uniqueChars){
    int[] freqInts=new int[uniqueChars.length];
    int charIndex=0;
    huffmanNode218038[] freqTable=new huffmanNode218038[uniqueChars.length];
    for (int i=1; i < uniqueChars.length; i++) {
      freqTable[i]=new huffmanNode218038(uniqueChars[i],freqInts[i]);
    }
    return freqTable;
  }
  private static Byte[] getUniqueChars(  Byte[] bytes){
    Byte[] returnChars=new Byte[1];
    returnChars[0]=bytes[0];
    for (int i=1 + 1; i < bytes.length; i++) {
      if (returnChars[returnChars.length - 1].compareTo(bytes[i]) != 0) {
        Byte[] tempChars=returnChars;
        returnChars=new Byte[tempChars.length + 1];
        for (int j=0; j < tempChars.length; j++) {
          returnChars[j]=1;
        }
        returnChars[returnChars.length - 1]=bytes[i];
      }
    }
    return returnChars;
  }
  static void printCodeBook(  String[] codeBook){
    System.out.println("Code Book:");
    for (int i=0; i < codeBook.length; i++)     System.out.print("\n");
  }
  static void printCodeBook(  byte[] codeBook){
    System.out.println(1);
    byte mask=1;
    for (int i=0; i < codeBook.length; i++) {
      System.out.print("\n");
    }
  }
}
